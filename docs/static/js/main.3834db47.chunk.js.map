{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","useState","mainColor","setMainColor","secondColor","setSecondColor","thirdColor","setThirdColor","className","color","onChange","event","rgb","r","g","b","console","log","red","green","blue","style","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"0NAwEeA,MAlEf,WAAgB,IAAD,EACqBC,mBAAS,qBAD9B,mBACNC,EADM,KACKC,EADL,OAEyBF,qBAFzB,mBAENG,EAFM,KAEOC,EAFP,OAGuBJ,qBAHvB,mBAGNK,EAHM,KAGMC,EAHN,KAeb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,8DACA,kBAAC,eAAD,CAAcA,UAAU,SAASC,MAAOP,EAAWQ,SAdpC,SAACD,EAAOE,GAC3BR,EAAa,OAAD,OAAQM,EAAMG,IAAIC,EAAlB,aAAwBJ,EAAMG,IAAIE,EAAlC,aAAwCL,EAAMG,IAAIG,EAAlD,MACZC,QAAQC,IAAIR,EAAMG,KAClB,IAAIM,EAAMT,EAAMG,IAAIC,EAChBM,EAAQV,EAAMG,IAAIE,EAClBM,EAAOX,EAAMG,IAAIG,EACrBV,EAAe,OAAD,OAAQc,EAAR,aAAkBC,EAAlB,aAA2BF,EAA3B,MACdX,EAAc,OAAD,OAAQa,EAAR,aAAiBF,EAAjB,aAAyBC,EAAzB,SAQT,yBAAKX,UAAU,aACb,yBAAKA,UAAU,OACb,yBACEA,UAAU,WACVa,MAAO,CAACC,gBAAiBpB,KAG3B,yBACEM,UAAU,WACVa,MAAO,CAACC,gBAAiBlB,KAG3B,yBACEI,UAAU,WACVa,MAAO,CAACC,gBAAiBhB,MAI7B,yBAAKE,UAAU,OACb,yBAAKA,UAAU,cACb,4CAEF,yBAAKA,UAAU,cACb,8CAEF,yBAAKA,UAAU,cACb,8CAGJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,2BAAIN,IAEN,yBAAKM,UAAU,cACb,2BAAIJ,IAEN,yBAAKI,UAAU,cACb,2BAAIF,SCnDEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.3834db47.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { SketchPicker } from 'react-color';\n\n\nfunction App() {\n  const [mainColor, setMainColor] = useState('RGB(171, 86, 190)')\n  const [secondColor, setSecondColor] = useState()\n  const [thirdColor, setThirdColor] = useState()\n\n  const handleChange = (color, event) => {\n    setMainColor(`RGB(${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b})`)\n    console.log(color.rgb)\n    let red = color.rgb.r\n    let green = color.rgb.g\n    let blue = color.rgb.b\n    setSecondColor(`RGB(${green}, ${blue}, ${red})`)\n    setThirdColor(`RGB(${blue}, ${red}, ${green})`)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1> Pick a color to get started! </h1>\n        <SketchPicker className=\"picker\" color={mainColor} onChange={handleChange} />\n        <div className=\"container\">\n          <div className=\"row\">\n            <div\n              className=\"colorbox\"\n              style={{backgroundColor: mainColor}}\n            >\n            </div>\n            <div\n              className=\"colorbox\"\n              style={{backgroundColor: secondColor}}\n            >\n            </div>\n            <div\n              className=\"colorbox\"\n              style={{backgroundColor: thirdColor}}\n            >\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"colorlabel\">\n              <h6>Main Color:</h6>\n            </div>\n            <div className=\"colorlabel\">\n              <h6>Second Color:</h6>\n            </div>\n            <div className=\"colorlabel\">\n              <h6>Third Color:</h6>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"colorvalue\">\n              <p>{mainColor}</p>\n            </div>\n            <div className=\"colorvalue\">\n              <p>{secondColor}</p>\n            </div>\n            <div className=\"colorvalue\">\n              <p>{thirdColor}</p>\n            </div>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}